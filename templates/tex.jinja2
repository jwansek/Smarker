((* macro expand_function(function_name, function_contents, x = "Function") *))
    \texttt{((( tex_escape(function_name) )))}:

    ((* if function_contents["present"] *))
        Arguments: \texttt{((( tex_escape(function_contents["arguments"]) )))}
    ((* else *))
        \errortext(Function \texttt{((( tex_escape(function_name) )))} not present.)
    ((* endif *))
((* endmacro *))

\documentclass{article}

\usepackage[margin=1in]{geometry} % margins
\usepackage{multicol} % columns
\usepackage{float} % layout
\usepackage{forest} % for the class tree
\usepackage{pdfpages} % for importing the test results pdf
\usepackage{xcolor} % colours
\usepackage{listings}
\lstset{
basicstyle=\small\ttfamily,
columns=flexible,
breaklines=true
}

\newcommand{\errortext}[1]{\textcolor{red}{\textbf{#1}}}

\author{((( student_no )))}
\title{((( name ))) - Automatic marking report}

\begin{document}

\begin{multicols}{((( tex_columns )))}

\maketitle
\section{Class Tree}

\begin{figure}[H]
    \centering
    \begin{forest}
        ((( recurse_class_tree_forest(class_tree)|indent(8, False) )))
    \end{forest}
    \caption{Class inheritance tree}
\end{figure}

\section{File Analysis}
((* set flat_files = flatten_struct(files) *))
((* for filename, files_contents in flat_files.items() *))
    \subsection{\texttt{((( filename )))}}
    ((* if files_contents["present"] *))
        ((* if files_contents["has_exception"] *))
            \errortext{File cannot be run - has compile time exception.}

            Please note that this file cannot be analysed or have tests preformed upon it-
            this can lead to the whole test suite failing if another module imports this.
                    
            \textbf{Exception Type:} \texttt{((( files_contents["exception"]["type"] )))}
            
            \textbf{Exception String:} \texttt{((( files_contents["exception"]["str"] )))}

            \textbf{Full Traceback:}

            \begin{lstlisting}
((( files_contents["exception"]["traceback"] )))
            \end{lstlisting}
        ((* else *))
            \textbf{Documentation:}

            ((( len_documentation(files_contents["documentation"]["comments"], files_contents["documentation"]["doc"]) ))) characters long
            ((* if tex_show_full_docs == "True" *))
                
                \textbf{Comments:}
                ((* if files_contents["documentation"]["comments"] == "None" *))
                    \errortext{No comments present.}
                ((* else *))
                    \begin{lstlisting}
((( files_contents["documentation"]["comments"] )))
                    \end{lstlisting}
                ((* endif *))

                \textbf{Docstring:}
                ((* if files_contents["documentation"]["doc"] == "None" *))
                    \errortext{No docstring present.}
                ((* else *))
                    \begin{lstlisting}
((( files_contents["documentation"]["doc"] )))
                    \end{lstlisting}
                ((* endif *))
            ((* endif *))

            ((* if "classes" in files_contents.keys() *))
                \subsubsection{Classes}

                ((* set flat_classes = flatten_struct(files_contents["classes"]) *))
                ((* for class_name, class_contents in flat_classes.items() *))
                    
                    
                    \texttt{((( class_name )))}:

                    ((* if class_contents["present"] *))
                        \textbf{Documentation:}
                        
                        ((( len_documentation(class_contents["documentation"]["comments"], class_contents["documentation"]["doc"]) ))) characters long
                        ((* if tex_show_full_docs == "True" *))
                        
                        
                        \textbf{Comments:}

                        ((* if class_contents["documentation"]["comments"] == "None" *))
                            \errortext{No comments present.}
                        ((* else *))
                            \begin{lstlisting}
((( class_contents["documentation"]["comments"] )))
                            \end{lstlisting}
                        ((* endif *))

                        
                        \textbf{Docstring:}

                        ((* if class_contents["documentation"]["doc"] == "None" *))
                            \errortext{No docstring present.}
                        ((* else *))
                            \begin{lstlisting}
((( class_contents["documentation"]["doc"] )))
                            \end{lstlisting}
                        ((* endif *))

                        ((* if "methods" in class_contents.keys() *))
                        \textbf{Methods:}
                            ((* set flat_methods = flatten_struct(class_contents["methods"]) *))
                            ((* for method_name, method_contents in flat_methods.items() *))
                                ((( expand_function(method_name, method_contents, x = "Method") )))
                            ((* endfor *))


                        ((* endif *))

                    ((* endif *))
                    
                    ((* else *))
                        
                        \errortext{Class not present.}

                    ((* endif *))


                ((* endfor *))


            ((* endif *))

        ((* endif *))
    ((* else *))
        \errortext{File is not present.}
    ((* endif *))
((* endfor *))

\section{Tests}
((* if test_results["pytest_report"] == "*** No Tests ***" *))
    No tests were executed.
((* else *))
    \includepdf[pages={1-},scale=1.0]{((( junit_xml_to_html(test_results["junitxml"], student_no) )))}
((* endif *))

\end{multicols}

\end{document}