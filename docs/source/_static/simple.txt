============================= test session starts ==============================
platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /tmp/tmp398_c3x6/simple_submission_1
collecting ... collected 1 item

../tmp/tmp398_c3x6/simple_submission_1/test_euclid.py::test_1 PASSED     [100%]

--------------- generated xml file: /tmp/tmpceag5_nn/report.xml ----------------
============================== 1 passed in 0.01s ===============================
4
=== simple_assessment - Student ID: 1 Automatic marking report ===
Report generated at 2022-05-01 15:49:15.701124

== Class Tree: ==

{}


== File Analysis ==

    = euclid.py =
        Documentation:
            28 characters long
            Comments:
                ```
                # the newest!
                # assessment 1
                ```
            Docstring:
                *** No docstring present ***
        Functions:
            gcd(2):
                Arguments:
                    (m, n) -> int
                    Enough? YES
                Documentation:
                    164 characters long
                    Comments:
                        *** No comments present ***
                    Docstring:
            ```
            Calculates the greatest common denominator between two numbers.

            Args:
                x (int): Number One
                y (int): Number Two

            Returns:
                int: The GCD of the two numbers
            ```
                Source:
                    15 lines (356 characters)
                    Code:
            ```
            def gcd(m,n) -> int:
                """Calculates the greatest common denominator between two numbers.

                Args:
                    x (int): Number One
                    y (int): Number Two

                Returns:
                    int: The GCD of the two numbers
                """
                if m< n:
                    (m,n) = (n,m)
                if(m%n) == 0:
                    return n
                else:
                    return (gcd(n, m % n)) # recursion taking place
            ```
        Runtime Analysis:
            Command `python euclid.py`:
                Monitor:
                    stdout
                Regexes:
                    `^4`:
                        Found occurrences: 1
                        Occurrences list:
                            4
                Full runtime output:
                ```
                    4
    
                ```



